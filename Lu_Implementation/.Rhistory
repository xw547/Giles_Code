beta0 = 0.291*seq(1,p,1)^-(1)
beta0[1:4] = 0
cores=detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
sim_100_withforest
sim_100_withforest = read.csv("~/Working/Ning/Giles_Project_1/Code/Lu_Implementation/sim_160_rho_5.csv")
sim_100_withfores
sim_100_withforest
eif_results = sim_100_withforest[1,]
t_95 = qt(.975, 160-1)
eif_mean = mean(eif_results)
SE = var(eif_results)/sqrt(160)
eif_Lower = eif_mean - t_95*SE
eif_mean = 1.5
SE = var(eif_results)/sqrt(160)
eif_results = as.numeric(sim_100_withforest[1,])
sim_100_withforest = read.csv("~/Working/Ning/Giles_Project_1/Code/Lu_Implementation/sim_160_rho_5.csv", sep = " ")
eif_results = as.numeric(sim_100_withforest[1,])
t_95 = qt(.975, 160-1)
eif_mean = 1.5
SE = var(eif_results)/sqrt(160)
eif_Lower = eif_mean - t_95*SE
eif_Upper = eif_mean + t_95*SE
SE = sqrt(var(eif_results/(160))
)
sqrt(var(eif_results))
SE = sqrt(var(eif_results)/160)
eif_Lower = eif_mean - t_95*SE
eif_Upper = eif_mean + t_95*SE
eif_covered = eif_results[eif_Lower<= eif_results &eif_results <=eif_Upper]
coverage_global = length(eif_covered)/length(eif_results)
eif_Lower = eif_mean - 1.2*t_95*SE
eif_Upper = eif_mean + 1.2*t_95*SE
eif_covered = eif_results[eif_Lower<= eif_results &eif_results <=eif_Upper]
coverage_global = length(eif_covered)/length(eif_results)
coverage_globa
coverage_global
?read.csv
rho_1 = read.table("./sim_160_withforest_1_rho_100N.csv", sep=" ")
setwd("~/Working/Ning/Giles_Project_1/Code/Lu_Implementation/")
rho_1 = read.table("./sim_160_withforest_1_rho_100N.csv", sep=" ")
rho_1 = t(as.numeric(read.table("./sim_160_withforest_1_rho_100N.csv", sep=" ")))
rho_1 = matrix(as.numeric(read.table("./sim_160_withforest_1_rho_100N.csv", sep=" ")))
rho_1 = as.numeric(read.table("./sim_160_withforest_1_rho_100N.csv", sep=" "))
rho_1 = as.numeric(as.matrix(read.table("./sim_160_withforest_1_rho_100N.csv", sep=" ")))
rho_1 = as.numeric(as.matrix(read.csv("./sim_160_withforest_1_rho_100N.csv", sep=" ")))
rho_1 = read.csv("./sim_160_withforest_1_rho_100N.csv", sep=" ")
rho_1 = read.csv("./sim_160_withforest_1_rho_100N.csv", sep=" ", header = F)
dim(rho_1)
rho[,1]
rho[1,]
rho_[1,]
rho_1[1,]
rho_1 = read.csv("./sim_160_withforest_1_rho_100N.csv", sep=" ", row.names = = F)
rho_1 = read.csv("./sim_160_withforest_1_rho_100N.csv", sep=" ", row.names = F)
rho_1 = read.table("./sim_160_withforest_1_rho_100N.csv", sep=" ", row.names = F)
rho_1 = read.table("./sim_160_withforest_1_rho_100N.csv", sep=" ", row.names = F)
rho_1 = read.table("./sim_160_withforest_1_rho_100N.csv", sep=" ", row.names = F)
rho_1 = read.table("./sim_160_withforest_1_rho_100N.csv", sep=" ")
dim(rho_1)
rho_1 = data.matrix(rho_1)
rho_1 = read.table("./sim_160_withforest_1_rho_100N.csv", sep=" ")
rho_1 = data.matrix(rho_1)
rho_3 <- read.table("./sim_160_withforest_3_rho_100N.csv", sep=" ")
rho_3 <- data.matrix(rho_3)
rho_5 <- read.table("./sim_160_withforest_5_rho_100N.csv", sep=" ")
rho_5 <- data.matrix(rho_5)
rho_7 <- read.table("./sim_160_withforest_7_rho_100N.csv", sep=" ")
rho_7 <- data.matrix(rho_7)
rho_9 <- read.table("./sim_160_withforest_9_rho_100N.csv", sep=" ")
rho_9 <- data.matrix(rho_9)
coverage = rowMeans(rbind(rho_1[3, ], rho_3[3, ], rho_5[3, ], rho_7[3, ], rho_9[3, ]))
line(seq(.1, .9, by = .2), coverage)
lineplot(seq(.1, .9, by = .2), coverage)
coverage
seq(.1, .9, by = .2)
line(seq(.1, .9, by = .2), coverage)
lines(seq(.1, .9, by = .2), coverage)
lines(x = seq(.1, .9, by = .2), y = coverage)
plot()
lines(x = seq(.1, .9, by = .2), y = coverage)
plot(x = seq(.1, .9, by = .2), y = coverage)
lines(x = seq(.1, .9, by = .2), y = coverage)
2*(1-seq(.1, .9, by = .2)^2)
bias = mean - 2*(1-seq(.1, .9, by = .2)^2)
mean_result = rowMeans(rbind(rho_1[1, ], rho_1[1, ], rho_5[1, ], rho_7[1, ], rho_9[1, ]))
bias_result = mean_result - 2*(1-seq(.1, .9, by = .2)^2)
bias_result
mean_result
mean_result = rowMeans(rbind(rho_1[1, ], rho_3[1, ], rho_5[1, ], rho_7[1, ], rho_9[1, ]))
mean_result
bias_result = mean_result - 2*(1-seq(.1, .9, by = .2)^2)
bias_result
lines(x = seq(.1, .9, by = .2), y = bias_result, color = blue)
lines(x = seq(.1, .9, by = .2), y = bias_result, color = "blue")
plot(x = seq(.1, .9, by = .2))
plot(x = seq(.1, .9, by = .2), y = seq(0,1,.1))
#plot(x = seq(.1, .9, by = .2), y = coverage)
#lines(x = seq(.1, .9, by = .2), y = coverage)
plot(x = seq(.1, .9, by = .2), y = bias_result)
lines(x = seq(.1, .9, by = .2), y = bias_result, color = "blue")
lines(x = seq(.1, .9, by = .2), y = abs(bias_result), color = "blue")
#plot(x = seq(.1, .9, by = .2), y = coverage)
#lines(x = seq(.1, .9, by = .2), y = coverage)
plot(x = seq(.1, .9, by = .2), y = bias_result)
lines(x = seq(.1, .9, by = .2), y = abs(bias_result))
mean_result
empirical_est = rowMeans(rbind(rho_1[2, ], rho_3[2, ], rho_5[2, ], rho_7[2, ], rho_9[2, ]))
empirical_est
empirical_est - 2*(1-seq(.1, .9, by = .2)^2)
1-seq(.1, .9, by = .2)^2
1.75-seq(.1, .9, by = .2)^2
mean_result - 1.75-seq(.1, .9, by = .2)^2
mean_result - 1.75+seq(.1, .9, by = .2)^2
empirical_est
mean_result
2*(1-seq(.1, .9, by = .2)^2)
2-seq(.1, .9, by = .2)^2)
2-seq(.1, .9, by = .2)^2
mean_result /2
1-seq(.1, .9, by = .2)^2
set.seed(2021)
n    = 2000
rho  = 0.5
X_12 = rbinormcop(n, rho)
X_310 = matrix(runif(n*8, 0,1), ncol = 8)
X = cbind(X_12, X_310)
colnames(X) <- c("1", "2", "3", "4", "5", "6", "7","8", "9", "10")
beta = c(1, 1, 1, 1, 1, 0, 0.5, 0.8, 1.2, 1.5)
Y = c(X%*%beta + rnorm(n, 0, 1))
### We'll start with the cpi of the first feature.
reduced_model = randomForest(X[,-1], Y, nodesize = 5,
ntree = 500, keep.inbag = T)
full_model    = randomForest(X[,], Y, nodesize = 5,
ntree = 500, keep.inbag = T)
reduced_den = empirical_rf_pdf(reduced_model, X[,-1], X[,-1])
mean(full_model$mse)
mean(reduced_model$mse)
mean((reduced_model$predicted- full_model$predicted)^2)
set.seed(2021)
n    = 2000
rho  = 0.5
X_12 = rbinormcop(n, rho)
X_310 = matrix(runif(n*8, 0,1), ncol = 8)
X = cbind(X_12, X_310)
colnames(X) <- c("1", "2", "3", "4", "5", "6", "7","8", "9", "10")
beta = c(1, 1, 1, 1, 1, 0, 0.5, 0.8, 1.2, 1.5)
Y = c(X%*%beta + rnorm(n, 0, 1))
### We'll start with the cpi of the first feature.
reduced_model = randomForest(X[,-1], Y, nodesize = 5,
ntree = 500, keep.inbag = T)
full_model    = randomForest(X[,], Y, nodesize = 5,
ntree = 500, keep.inbag = T)
mean((reduced_model$predicted- full_model$predicted)^2)
#X_12 = rbinormcop(n, rho)
X_12 = mvrnorm(n, rep(0,2), Sigma = matrix(c(1, rho, rho,1), ncol =2))
X_310 = matrix(runif(n*8, 0,1), ncol = 8)
X = cbind(X_12, X_310)
colnames(X) <- c("1", "2", "3", "4", "5", "6", "7","8", "9", "10")
beta = c(1, 1, 1, 1, 1, 0, 0.5, 0.8, 1.2, 1.5)
Y = c(X%*%beta + rnorm(n, 0, 1))
### We'll start with the cpi of the first feature.
reduced_model = randomForest(X[,-1], Y, nodesize = 5,
ntree = 500, keep.inbag = T)
full_model    = randomForest(X[,], Y, nodesize = 5,
ntree = 500, keep.inbag = T)
mean((reduced_model$predicted- full_model$predicted)^2)
plot_data = as.data.frame(rho = seq(.1, .9, by = .2), coverage = coverage, bias = bias_result )
library(ggplot2)
setwd("~/Working/Ning/Giles_Project_1/Code/Lu_Implementation/")
rho_1 = read.table("./sim_160_withforest_1_rho_100N.csv", sep=" ")
rho_1 = data.matrix(rho_1)
rho_3 <- read.table("./sim_160_withforest_3_rho_100N.csv", sep=" ")
rho_3 <- data.matrix(rho_3)
rho_5 <- read.table("./sim_160_withforest_5_rho_100N.csv", sep=" ")
rho_5 <- data.matrix(rho_5)
rho_7 <- read.table("./sim_160_withforest_7_rho_100N.csv", sep=" ")
rho_7 <- data.matrix(rho_7)
rho_9 <- read.table("./sim_160_withforest_9_rho_100N.csv", sep=" ")
rho_9 <- data.matrix(rho_9)
coverage = rowMeans(rbind(rho_1[3, ], rho_3[3, ], rho_5[3, ], rho_7[3, ], rho_9[3, ]))
mean_result = rowMeans(rbind(rho_1[1, ], rho_3[1, ], rho_5[1, ], rho_7[1, ], rho_9[1, ]))
empirical_est = rowMeans(rbind(rho_1[2, ], rho_3[2, ], rho_5[2, ], rho_7[2, ], rho_9[2, ]))
bias_result = mean_result - 2*(1-seq(.1, .9, by = .2)^2)
#plot(x = seq(.1, .9, by = .2), y = coverage)
#lines(x = seq(.1, .9, by = .2), y = coverage)
plot(x = seq(.1, .9, by = .2), y = bias_result)
lines(x = seq(.1, .9, by = .2), y = abs(bias_result))
plot_data = as.data.frame(rho = seq(.1, .9, by = .2), coverage = coverage, bias = bias_result )
plot_data = data.frame(rho = seq(.1, .9, by = .2), coverage = coverage, bias = bias_result )
current_plot = ggplot(data = plot_data, aes(x = rho)) +
geom_line(aes(x = rho, y = coverage))
current_plot
current_plot = ggplot(data = plot_data, aes(x = rho)) +
geom_line(aes(x = rho, y = coverage)) +
geom_line(aes(x = rho, y = bias))
current_plot
current_plot = ggplot(data = plot_data, aes(x = rho), color =group) +
geom_line(aes(x = rho, y = coverage)) +
geom_line(aes(x = rho, y = bias))
current_plot = ggplot(data = plot_data, aes(x = rho) +
)
current_plot = ggplot(data = plot_data, aes(x = rho) )+
geom_line(aes(x = rho, y = coverage), color = "red")
current_plot
current_plot = ggplot(data = plot_data, aes(x = rho) )+
geom_line(aes(x = rho, y = coverage), color = "blue") +
geom_hline(yintercept = .95, linetype = "dashed", color = "red")
current_plot
ggplot(data = plot_data, aes(x = rho) )+
geom_line(aes(x = rho, y = coverage), color = "blue") +
geom_hline(yintercept = 0.95, linetype = "dashed", color = "red") +
xlab("rho")
ggplot(data = plot_data, aes(x = rho) )+
geom_line(aes(x = rho, y = coverage), color = "blue") +
geom_hline(yintercept = 0.95, linetype = "dashed", color = "red") +
xlab("rho") +
ylab("coverage")+
ggtitle("Coverage of 95% Confidence Interval")
ggplot(data = plot_data, aes(x = rho) )+
geom_line(aes(x = rho, y = coverage), color = "blue") +
geom_hline(yintercept = 0.95, linetype = "dashed", color = "red") +
xlab("rho") +
ylab("coverage")+
ggtitle("Coverage of 95% Confidence Interval") +
theme(plot.title = element_text(hjust = 0.5))
bias_plot = ggplot(data = plot_data, aes(x = rho) )+
geom_line(aes(x = rho, y = bias), color = "blue") +
geom_hline(yintercept = 0.95, linetype = "dashed", color = "red") +
xlab("rho") +
ylab("bias")+
ggtitle("Coverage of 95% Confidence Interval") +
theme(plot.title = element_text(hjust = 0.5))
bias_plot
library(ggplot2)
setwd("~/Working/Ning/Giles_Project_1/Code/Lu_Implementation/")
rho_1 = read.table("./sim_160_withforest_1_rho_100N.csv", sep=" ")
rho_1 = data.matrix(rho_1)
rho_3 <- read.table("./sim_160_withforest_3_rho_100N.csv", sep=" ")
rho_3 <- data.matrix(rho_3)
rho_5 <- read.table("./sim_160_withforest_5_rho_100N.csv", sep=" ")
rho_5 <- data.matrix(rho_5)
rho_7 <- read.table("./sim_160_withforest_7_rho_100N.csv", sep=" ")
rho_7 <- data.matrix(rho_7)
rho_9 <- read.table("./sim_160_withforest_9_rho_100N.csv", sep=" ")
rho_9 <- data.matrix(rho_9)
coverage = rowMeans(rbind(rho_1[3, ], rho_3[3, ], rho_5[3, ], rho_7[3, ], rho_9[3, ]))
mean_result = rowMeans(rbind(rho_1[1, ], rho_3[1, ], rho_5[1, ], rho_7[1, ], rho_9[1, ]))
empirical_est = rowMeans(rbind(rho_1[2, ], rho_3[2, ], rho_5[2, ], rho_7[2, ], rho_9[2, ]))
bias_result = mean_result - 2*(1-seq(.1, .9, by = .2)^2)
#plot(x = seq(.1, .9, by = .2), y = coverage)
#lines(x = seq(.1, .9, by = .2), y = coverage)
#plot(x = seq(.1, .9, by = .2), y = bias_result)
#lines(x = seq(.1, .9, by = .2), y = abs(bias_result))
plot_data = data.frame(rho = seq(.1, .9, by = .2), coverage = coverage, bias = bias_result )
coverage_plot = ggplot(data = plot_data, aes(x = rho) )+
geom_line(aes(x = rho, y = coverage), color = "blue") +
geom_hline(yintercept = 0.95, linetype = "dashed", color = "red") +
xlab("rho") +
ylab("coverage")+
ggtitle("Coverage of 95% Confidence Interval") +
theme(plot.title = element_text(hjust = 0.5))
bias_plot = ggplot(data = plot_data, aes(x = rho) )+
geom_line(aes(x = rho, y = bias), color = "blue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
xlab("rho") +
ylab("bias")+
ggtitle("Average bias with respect to rho") +
theme(plot.title = element_text(hjust = 0.5))
coverage_plot
bias_plot
bias_plot = ggplot(data = plot_data, aes(x = rho) )+
geom_line(aes(x = rho, y = bias), color = "blue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
xlab("rho") +
ylab("bias")+
ggtitle("Average bias of EIF estimate with respect to rho") +
theme(plot.title = element_text(hjust = 0.5))
coverage_plot
bias_plot = ggplot(data = plot_data, aes(x = rho) )+
geom_line(aes(x = rho, y = bias), color = "blue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
xlab("rho") +
ylab("bias")+
ggtitle("Average bias of EIF estimate with respect to rho") +
theme(plot.title = element_text(hjust = 0.5))
bias_plot
plot_data = data.frame(rho = seq(.1, .9, by = .2), coverage = coverage,
estimate = mean_result, nottwice = 1-rho^2,
twice = 2*(1-rho^2))
estimate_plot = ggplot(data = plot_data, aes(x = rho) )+
geom_line(aes(x = rho, y = bias), color = "blue") +
geom_hline(yintercept = nottwice, linetype = "dashed", color = "red") +
xlab("rho") +
ylab("Estimated CPI")+
ggtitle("Average bias of EIF estimate with respect to rho") +
theme(plot.title = element_text(hjust = 0.5))
plot_data = data.frame(rho = seq(.1, .9, by = .2), coverage = coverage,
estimate = mean_result, nottwice = 1-rho^2,
twice = 2*(1-rho^2))
coverage_plot = ggplot(data = plot_data, aes(x = rho) )+
geom_line(aes(x = rho, y = coverage), color = "blue") +
geom_hline(yintercept = 0.95, linetype = "dashed", color = "red") +
xlab("rho") +
ylab("coverage")+
ggtitle("Coverage of 95% Confidence Interval") +
theme(plot.title = element_text(hjust = 0.5))
estimate_plot = ggplot(data = plot_data, aes(x = rho) )+
geom_line(aes(x = rho, y = bias), color = "blue") +
geom_hline(yintercept = nottwice, linetype = "dashed", color = "red") +
xlab("rho") +
ylab("Estimated CPI")+
ggtitle("Average bias of EIF estimate with respect to rho") +
theme(plot.title = element_text(hjust = 0.5))
plot_data = data.frame(rho = seq(.1, .9, by = .2), coverage = coverage,
estimate = mean_result, not = 1-rho^2,
twice = 2*(1-rho^2))
estimate_plot = ggplot(data = plot_data, aes(x = rho) )+
geom_line(aes(x = rho, y = bias), color = "blue") +
geom_hline(yintercept = nottwice, linetype = "dashed", color = "red") +
xlab("rho") +
ylab("Estimated CPI")+
ggtitle("Average bias of EIF estimate with respect to rho") +
theme(plot.title = element_text(hjust = 0.5))
estimate_plot = ggplot(data = plot_data, aes(x = rho) )+
geom_line(aes(x = rho, y = estimate), color = "blue") +
geom_line(aes(x = rho, y = not),  color = "red") +
xlab("rho") +
ylab("Estimated CPI")+
ggtitle("Average bias of EIF estimate with respect to rho") +
theme(plot.title = element_text(hjust = 0.5))
estimate_plot
estimate_plot = ggplot(data = plot_data, aes(x = rho)+
ff
f
estimate_plot = ggplot(data = plot_data, aes(x = rho)+  ylim(0,2)+
)
estimate_plot = ggplot(data = plot_data, aes(x = rho))+  ylim(0,2)+
geom_line(aes(x = rho, y = estimate), color = "blue") +
geom_line(aes(x = rho, y = not),  color = "red") +
xlab("rho") +
ylab("Estimated CPI")+
ggtitle("Average bias of EIF estimate with respect to rho") +
theme(plot.title = element_text(hjust = 0.5))
estimate_plot
plot_data = data.frame(rho = seq(.1, .9, by = .2), coverage = coverage,
estimate = mean_result, not = 1-seq(.1, .9, by = .2)^2,
twice = 2*(1-seq(.1, .9, by = .2)^2))
coverage_plot = ggplot(data = plot_data, aes(x = rho) )+
geom_line(aes(x = rho, y = coverage), color = "blue") +
geom_hline(yintercept = 0.95, linetype = "dashed", color = "red") +
xlab("rho") +
ylab("coverage")+
ggtitle("Coverage of 95% Confidence Interval") +
theme(plot.title = element_text(hjust = 0.5))
estimate_plot = ggplot(data = plot_data, aes(x = rho))+  ylim(0,2)+
geom_line(aes(x = rho, y = estimate), color = "blue") +
geom_line(aes(x = rho, y = not),  color = "red") +
xlab("rho") +
ylab("Estimated CPI")+
ggtitle("Average bias of EIF estimate with respect to rho") +
theme(plot.title = element_text(hjust = 0.5))
estimate_plot
estimate_plot = ggplot(data = plot_data, aes(x = rho))+  ylim(0,2)+
geom_line(aes(x = rho, y = estimate), color = "blue") +
geom_line(aes(x = rho, y = not),  color = "red") +
geom_line(aes(x = rho, y = twice),  color = "green") +
xlab("rho") +
ylab("Estimated CPI")+
ggtitle("Average bias of EIF estimate with respect to rho") +
theme(plot.title = element_text(hjust = 0.5))
estimate_plot
estimate_plot = ggplot(data = plot_data, aes(x = rho))+  ylim(0,2)+
geom_line(aes(x = rho, y = estimate), color = "blue") +
geom_line(aes(x = rho, y = not),  color = "red") +
geom_line(aes(x = rho, y = twice),  color = "green") +
xlab("rho") +
ylab("Estimated CPI")+
ggtitle("Average of EIF estimate with respect to rho") +
theme(plot.title = element_text(hjust = 0.5))
estimate_plot
# Example data
x <- c(1, 2, 3, 4, 5)
y1 <- c(2, 4, 1, 6, 8)
y2 <- c(1, 3, 2, 7, 4)
# Create a data frame
df <- data.frame(
x = rep(x, 2),
y = c(y1, y2),
group = rep(c("Line1", "Line2"), each = length(x))
)
# Load the ggplot2 package
library(ggplot2)
# Create a line chart with different colors and a legend
ggplot(df, aes(x = x, y = y, color = group, linetype = group)) +
geom_line() +
xlab("X-axis Label") +
ylab("Y-axis Label") +
ggtitle("Line Chart of X and Y with Legend") +
scale_color_manual(values = c("blue", "red")) +  # Customize colors
scale_linetype_manual(values = c("solid", "dashed")) +  # Customize line types
theme(legend.title = element_blank())  # Remove legend title if not needed
estimate_plot = ggplot(data = plot_data, aes(x = rho))+  ylim(0,2)+
geom_line(aes(x = rho, y = estimate, color = "estimate"), color = "blue") +
geom_line(aes(x = rho, y = not, color = "1-rho^2"),  color = "red") +
geom_line(aes(x = rho, y = twice, color = "2-2rho^2"),  color = "green") +
xlab("rho") +
ylab("Estimated CPI")+
ggtitle("Average of EIF estimate with respect to rho") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(color = "Legend Title")
estimate_plot
estimate_plot = ggplot(data = plot_data, aes(x = rho))+  ylim(0,2)+
geom_line(aes(x = rho, y = estimate, color = "estimate"), color = "blue") +
geom_line(aes(x = rho, y = not, color = "1-rho^2"),  color = "red") +
geom_line(aes(x = rho, y = twice, color = "2-2rho^2"),  color = "green") +
xlab("rho") +
ylab("Estimated CPI")+
ggtitle("Average of EIF estimate with respect to rho") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(color = "Legend Title")
plot_data = data.frame(rho = seq(.1, .9, by = .2), coverage = coverage,
estimate = mean_result, not = 1-seq(.1, .9, by = .2)^2,
twice = 2*(1-seq(.1, .9, by = .2)^2),
plus = 2*(1-seq(.1, .9, by = .2)^2)+.75 )
coverage_plot = ggplot(data = plot_data, aes(x = rho) )+
geom_line(aes(x = rho, y = coverage), color = "blue") +
geom_hline(yintercept = 0.95, linetype = "dashed", color = "red") +
xlab("rho") +
ylab("coverage")+
ggtitle("Coverage of 95% Confidence Interval") +
theme(plot.title = element_text(hjust = 0.5))
estimate_plot = ggplot(data = plot_data, aes(x = rho))+  ylim(0,2)+
geom_line(aes(x = rho, y = estimate, color = "estimate"), color = "blue") +
geom_line(aes(x = rho, y = not, color = "1-rho^2"),  color = "red") +
geom_line(aes(x = rho, y = twice, color = "2-2rho^2"),  color = "green") +
geom_line(aes(x = rho, y = plus), color = "yello")
estimate_plot = ggplot(data = plot_data, aes(x = rho))+  ylim(0,2)+
geom_line(aes(x = rho, y = estimate, color = "estimate"), color = "blue") +
geom_line(aes(x = rho, y = not, color = "1-rho^2"),  color = "red") +
geom_line(aes(x = rho, y = twice, color = "2-2rho^2"),  color = "green") +
geom_line(aes(x = rho, y = plus), color = "yello")+
xlab("rho") +
ylab("Estimated CPI")+
ggtitle("Average of EIF estimate with respect to rho") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(color = "Legend Title")
estimate_plot
estimate_plot
View(plot_data)
2*(1-seq(.1, .9, by = .2)^2)+.75
plus = (1-seq(.1, .9, by = .2)^2)+.75
plot_data = data.frame(rho = seq(.1, .9, by = .2), coverage = coverage,
estimate = mean_result, not = 1-seq(.1, .9, by = .2)^2,
twice = 2*(1-seq(.1, .9, by = .2)^2),
plus = (1-seq(.1, .9, by = .2)^2)+.75)
estimate_plot = ggplot(data = plot_data, aes(x = rho))+  ylim(0,2)+
geom_line(aes(x = rho, y = estimate, color = "estimate"), color = "blue") +
geom_line(aes(x = rho, y = not, color = "1-rho^2"),  color = "red") +
geom_line(aes(x = rho, y = twice, color = "2-2rho^2"),  color = "green") +
geom_line(aes(x = rho, y = plus), color = "yello")+
xlab("rho") +
ylab("Estimated CPI")+
ggtitle("Average of EIF estimate with respect to rho") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(color = "Legend Title")
estimate_plot
estimate_plot = ggplot(data = plot_data, aes(x = rho))+  ylim(0,2)+
geom_line(aes(x = rho, y = estimate, color = "estimate"), color = "blue") +
geom_line(aes(x = rho, y = not, color = "1-rho^2"),  color = "red") +
geom_line(aes(x = rho, y = twice, color = "2-2rho^2"),  color = "green") +
geom_line(aes(x = rho, y = plus), color = "yellow")+
xlab("rho") +
ylab("Estimated CPI")+
ggtitle("Average of EIF estimate with respect to rho") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(color = "Legend Title")
estimate_plot
View(plot_data)
plot_data = data.frame(rho = seq(.1, .9, by = .2), coverage = coverage,
estimate = mean_result, not = 1-seq(.1, .9, by = .2)^2,
twice = 2*(1-seq(.1, .9, by = .2)^2),
plus = (1-seq(.1, .9, by = .2)^2)+.75,
ls = c(0.9791275, 0.8998923, 0.7413926, 0.5037403, 0.1872711),
forest = c(0.7559513, 0.7454708, 0.6614415, 0.4955970, 0.2403905))
mean_plot = ggplot(data = plot_data, aes(x = rho))+  ylim(0,2)+
geom_line(aes(x = rho, y = not, color = "1-rho^2"),  color = "red")+
geom_line(aes(x = rho, y = ls, color = "1-rho^2"),  color = "blue") +
geom_line(aes(x = rho, y = forest, color = "1-rho^2"),  color = "green")
mean_plot
mean_plot = ggplot(data = plot_data, aes(x = rho))+  ylim(0,2)+
geom_line(aes(x = rho, y = not, color = "1-rho^2"),  color = "red")+
geom_line(aes(x = rho, y = ls, color = "1-rho^2"),  color = "blue") +
geom_line(aes(x = rho, y = forest, color = "1-rho^2"),  color = "green") +
ggtitle("Plug in for E(f - f_-1) results")
mean_plot
mean_plot = ggplot(data = plot_data, aes(x = rho))+  ylim(0,2)+
geom_line(aes(x = rho, y = not, color = "1-rho^2"),  color = "red")+
geom_line(aes(x = rho, y = ls, color = "1-rho^2"),  color = "blue") +
geom_line(aes(x = rho, y = forest, color = "1-rho^2"),  color = "green") +
ggtitle("Plug in for E(f - f_-1) results") +
theme(plot.title = element_text(hjust = 0.5))
mean_plot
mean_plot = ggplot(data = plot_data, aes(x = rho))+  ylim(0,2)+
geom_line(aes(x = rho, y = not, color = "1-rho^2"),  color = "red")+
geom_line(aes(x = rho, y = ls, color = "1-rho^2"),  color = "blue") +
geom_line(aes(x = rho, y = forest, color = "1-rho^2"),  color = "green") +
ggtitle("Plug in for E(f - f_-1) results") +
ylab("Estimated Value")+
theme(plot.title = element_text(hjust = 0.5))
mean_plot
